"use strict";

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var language = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [2, 58],
        $V1 = [1, 5],
        $V2 = [4, 12, 15, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 36, 40, 41, 42, 44, 45],
        $V3 = [12, 15, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 36, 40, 41, 42, 44],
        $V4 = [1, 15],
        $V5 = [12, 15, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 36, 40, 41, 42, 44, 45],
        $V6 = [1, 21],
        $V7 = [15, 16, 21, 31, 33, 35],
        $V8 = [15, 16, 21, 31, 33, 35, 45],
        $V9 = [1, 25],
        $Va = [1, 26],
        $Vb = [1, 42],
        $Vc = [1, 54],
        $Vd = [1, 44],
        $Ve = [1, 45],
        $Vf = [1, 41],
        $Vg = [1, 47],
        $Vh = [1, 46],
        $Vi = [1, 48],
        $Vj = [1, 49],
        $Vk = [1, 50],
        $Vl = [1, 51],
        $Vm = [1, 43],
        $Vn = [1, 53],
        $Vo = [1, 52],
        $Vp = [1, 55],
        $Vq = [1, 67],
        $Vr = [1, 68],
        $Vs = [1, 69],
        $Vt = [1, 70],
        $Vu = [12, 15, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45],
        $Vv = [2, 42],
        $Vw = [2, 45],
        $Vx = [2, 46],
        $Vy = [2, 47],
        $Vz = [15, 16, 21, 31, 32, 33, 34, 35, 36, 45],
        $VA = [15, 16, 21, 24, 25, 31, 33, 35, 45],
        $VB = [12, 15, 16, 21, 22, 23, 25, 26, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45],
        $VC = [2, 67],
        $VD = [12, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "file": 3, "EOF": 4, "e": 5, "space": 6, "CPXElement": 7, "CPXSelfClosingElement": 8, "CPXOpeningElement": 9, "CPXChildren": 10, "CPXClosingElement": 11, "<": 12, "CPXElementName": 13, "CPXAttributes": 14, "/": 15, ">": 16, "CPXComment": 17, "CPXIdentifier": 18, "CPXNamespacedName": 19, "CPXMemberExpression": 20, "IDENTIFIER": 21, "-": 22, ":": 23, "->": 24, ".": 25, "!": 26, "any": 27, "CPXAttribute": 28, "CPXAttributeIdentifier": 29, "CPXAttributeName": 30, "{": 31, "}": 32, "[": 33, "]": 34, "(": 35, ")": 36, "CPXChild": 37, "CPXText": 38, "CPXExpression": 39, "*": 40, "string": 41, "VNode": 42, "CPXTextCharacter": 43, "ANY": 44, "WHITESPACE": 45, "char": 46, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 4: "EOF", 12: "<", 15: "/", 16: ">", 21: "IDENTIFIER", 22: "-", 23: ":", 24: "->", 25: ".", 26: "!", 31: "{", 32: "}", 33: "[", 34: "]", 35: "(", 36: ")", 40: "*", 41: "string", 42: "VNode", 44: "ANY", 45: "WHITESPACE" },
        productions_: [0, [3, 1], [3, 2], [5, 3], [7, 1], [7, 5], [8, 9], [8, 1], [9, 7], [11, 7], [13, 1], [13, 1], [13, 1], [18, 1], [18, 3], [19, 3], [20, 3], [20, 3], [20, 3], [20, 3], [17, 7], [17, 6], [14, 0], [14, 3], [28, 1], [29, 1], [29, 5], [29, 5], [29, 5], [30, 1], [30, 1], [10, 0], [10, 3], [37, 1], [37, 1], [37, 1], [39, 9], [39, 3], [39, 5], [39, 5], [38, 0], [38, 2], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [6, 0], [6, 1], [27, 0], [27, 1], [27, 2], [46, 1], [46, 1], [46, 1], [46, 1], [46, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return "";
                    break;
                case 2:
                    return $$[$0 - 1];
                    break;
                case 3:
                    this.$ = createVNode($$[$0 - 1]);
                    break;
                case 5:

                    if ($$[$0 - 4].sel !== $$[$0]) {
                        yyerror(yylineno, 'open tag "' + getTagName($$[$0 - 4].sel) + '" does not match close tag "' + getTagName($$[$0]) + '"');
                    }

                    this.$ = {
                        type: 'CPXElement',
                        sel: $$[$0 - 4].sel,
                        data: $$[$0 - 4].data,
                        children: $$[$0 - 2]
                    };

                    break;
                case 6:
                    this.$ = { type: 'CPXElement', sel: $$[$0 - 6], data: $$[$0 - 4] };
                    break;
                case 8:
                    this.$ = { sel: $$[$0 - 4], data: $$[$0 - 2] };
                    break;
                case 9:
                    this.$ = $$[$0 - 2];
                    break;
                case 10:case 11:
                    this.$ = 'u8"' + $$[$0] + '"';
                    break;
                case 14:case 15:case 16:case 17:case 18:case 19:
                    this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 20:
                    this.$ = { type: 'CPXComment', value: $$[$0 - 2] };
                    break;
                case 21:
                    this.$ = { type: 'CPXComment', value: '' };
                    break;
                case 22:case 31:
                    this.$ = [];
                    break;
                case 23:case 32:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 24:

                    var value;
                    if ($$[$0].type === 'attr') {
                        value = 'u8"true"';
                    } else if ($$[$0].type === 'prop') {
                        value = 'emscripten::val(true)';
                    } else if ($$[$0].type === 'callback') {
                        yyerror(yylineno, 'cannot set callback "' + $$[$0].name + '" to "true" using shorthand notation. Maybe you want to use an {attr} or a [prop]?');
                    }
                    this.$ = {
                        type: $$[$0].type,
                        name: 'u8"' + $$[$0].name + '"',
                        value: value
                    };

                    break;
                case 25:

                    var name = $$[$0];
                    var type = 'attr';
                    if (name.indexOf('on') === 0) {
                        name = name.toLowerCase();
                        type = 'callback';
                    } else if (name === 'value' || name === 'checked') {
                        type = 'prop';
                    }
                    this.$ = { type: type, name: name };

                    break;
                case 26:
                    this.$ = { type: 'attr', name: $$[$0 - 2] };
                    break;
                case 27:
                    this.$ = { type: 'prop', name: $$[$0 - 2] };
                    break;
                case 28:
                    this.$ = { type: 'callback', name: $$[$0 - 2] };
                    break;
                case 33:
                    this.$ = { type: 'CPXText', value: $$[$0] };
                    break;
                case 36:
                    this.$ = { type: 'comment' };
                    break;
                case 37:case 39:
                    this.$ = { type: 'VNode', value: $$[$0 - 1].trim() };
                    break;
                case 38:
                    this.$ = { type: 'string', value: $$[$0 - 1] };
                    break;
                case 40:
                    this.$ = '';
                    break;
                case 41:case 62:
                    this.$ = $$[$0 - 1] + $$[$0];
                    break;
                case 58:
                    this.$ = '';
                    break;
            }
        },
        table: [{ 3: 1, 4: [1, 2], 5: 3, 6: 4, 12: $V0, 45: $V1 }, { 1: [3] }, { 1: [2, 1] }, { 4: [1, 6] }, { 7: 7, 8: 8, 9: 9, 12: [1, 10], 17: 11 }, o([4, 12, 15, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45], [2, 59]), { 1: [2, 2] }, { 4: $V0, 6: 12, 45: $V1 }, o($V2, [2, 4]), o($V3, $V0, { 6: 13, 45: $V1 }), { 6: 14, 21: $V0, 26: $V4, 45: $V1 }, o($V2, [2, 7]), { 4: [2, 3] }, o($V5, [2, 31], { 10: 16 }), { 13: 17, 18: 18, 19: 19, 20: 20, 21: $V6 }, { 22: [1, 22] }, o($V3, $V0, { 6: 23, 45: $V1 }), o($V7, $V0, { 6: 24, 45: $V1 }), o($V8, [2, 10], { 22: $V9, 23: $Va, 24: [1, 27], 25: [1, 28] }), o($V8, [2, 11]), o($V8, [2, 12], { 24: [1, 29], 25: [1, 30] }), o([15, 16, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 36, 45], [2, 13]), { 22: [1, 31] }, { 6: 40, 7: 36, 8: 8, 9: 9, 11: 32, 12: [1, 34], 15: $Vb, 17: 11, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: [1, 39], 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 37: 33, 38: 35, 39: 37, 40: $Vm, 41: $Vn, 42: $Vo, 43: 38, 44: $Vp, 45: $V1 }, o($V8, [2, 22], { 14: 56 }), { 18: 57, 21: $V6 }, { 18: 58, 21: $V6 }, { 18: 59, 21: $V6 }, { 18: 60, 21: $V6 }, { 18: 61, 21: $V6 }, { 18: 62, 21: $V6 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: [1, 64], 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 27: 63, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 65 }, o($V2, [2, 5]), o($V5, [2, 32]), o([15, 21], $V0, { 6: 71, 26: $V4, 45: $V1 }), o($V5, [2, 33]), o($V5, [2, 34]), o($V5, [2, 35]), o([12, 31], [2, 40], { 43: 38, 6: 40, 38: 72, 15: $Vb, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 44: $Vp, 45: $V1 }), { 6: 73, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: [1, 75], 24: $Vf, 25: $Vg, 26: $Vh, 27: 74, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 65 }, o($Vu, $Vv), o($Vu, [2, 43]), o($Vu, [2, 44]), o($Vu, $Vw), o($Vu, $Vx), o($Vu, $Vy), o($Vu, [2, 48]), o($Vu, [2, 49]), o($Vu, [2, 50]), o($Vu, [2, 51]), o($Vu, [2, 52]), o($Vu, [2, 53]), o($Vu, [2, 54]), o($Vu, [2, 55]), o($Vu, [2, 56]), o($Vu, [2, 57]), o($V7, $V0, { 6: 76, 45: $V1 }), o([15, 16, 21, 23, 24, 25, 31, 32, 33, 34, 35, 36, 45], [2, 14], { 22: $V9 }), o($Vz, [2, 15], { 22: $V9 }), o($VA, [2, 16], { 22: $V9 }), o($VA, [2, 17], { 22: $V9 }), o($VA, [2, 18], { 22: $V9 }), o($VA, [2, 19], { 22: $V9 }), { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: [1, 77], 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 78 }, o($VB, $Vx, { 24: [1, 79] }), o($Vu, [2, 61]), o($Vu, [2, 63]), o($Vu, [2, 64]), o($Vu, [2, 65]), o($Vu, [2, 66]), o($Vu, $VC), { 13: 17, 15: [1, 80], 18: 18, 19: 19, 20: 20, 21: $V6 }, o($V5, [2, 41]), o($VD, $Vv, { 15: [1, 81] }), { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: $Vs, 32: [1, 82], 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 78 }, o([12, 15, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 40, 44, 45], $Vy, { 41: [1, 83], 42: [1, 84] }), { 15: [1, 85], 16: [1, 86], 18: 93, 19: 94, 21: $V6, 28: 87, 29: 88, 30: 89, 31: [1, 90], 33: [1, 91], 35: [1, 92] }, o($VB, $Vx, { 24: [1, 95] }), o($Vu, [2, 62]), o($V2, [2, 21]), { 6: 96, 21: $V0, 45: $V1 }, { 40: [1, 97] }, o($V5, [2, 37], { 16: $VC, 32: $VC }), { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 27: 98, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 65 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 27: 99, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 65 }, { 6: 100, 16: $V0, 45: $V1 }, o($V5, [2, 8]), o($V8, [2, 23]), o($V8, [2, 24]), o($V8, [2, 25]), { 6: 101, 21: $V0, 45: $V1 }, { 6: 102, 21: $V0, 45: $V1 }, { 6: 103, 21: $V0, 45: $V1 }, o($Vz, [2, 29], { 22: $V9, 23: $Va }), o($Vz, [2, 30]), o($V2, [2, 20]), { 13: 104, 18: 18, 19: 19, 20: 20, 21: $V6 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 27: 105, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 65 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: $Vs, 32: [1, 106], 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 78 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: $Vs, 32: [1, 107], 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: $Vm, 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 78 }, { 16: [1, 108] }, { 18: 93, 19: 94, 21: $V6, 30: 109 }, { 18: 93, 19: 94, 21: $V6, 30: 110 }, { 18: 93, 19: 94, 21: $V6, 30: 111 }, { 6: 112, 16: $V0, 45: $V1 }, { 6: 40, 12: $Vq, 15: $Vb, 16: $Vr, 21: $Vc, 22: $Vd, 23: $Ve, 24: $Vf, 25: $Vg, 26: $Vh, 31: $Vs, 32: $Vt, 33: $Vi, 34: $Vj, 35: $Vk, 36: $Vl, 40: [1, 113], 41: $Vn, 42: $Vo, 43: 66, 44: $Vp, 45: $V1, 46: 78 }, o($V5, [2, 38], { 16: $VC, 32: $VC }), o($V5, [2, 39], { 16: $VC, 32: $VC }), o($V2, [2, 6]), { 6: 114, 32: $V0, 45: $V1 }, { 6: 115, 34: $V0, 45: $V1 }, { 6: 116, 36: $V0, 45: $V1 }, { 16: [1, 117] }, o($VD, $Vw, { 15: [1, 118] }), { 32: [1, 119] }, { 34: [1, 120] }, { 36: [1, 121] }, o($V2, [2, 9]), { 6: 122, 32: $V0, 45: $V1 }, o($V8, [2, 26]), o($V8, [2, 27]), o($V8, [2, 28]), { 32: [1, 123] }, o($V5, [2, 36])],
        defaultActions: { 2: [2, 1], 6: [2, 2], 12: [2, 3] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };

    function yyerror(line, msg) {
        throw new Error('Error while parsing CPX code at line ' + line + ': ' + msg);
    }

    function getTagName(sel) {
        if (sel.indexOf('u8"') === 0) {
            return sel.substring(0, sel.length - 1).replace('u8"', '');
        }
        return sel;
    }

    function filterByType(type, vnode) {
        return vnode.data.filter(function (attribute) {
            return attribute.type === type;
        });
    }

    var filterAttrs = filterByType.bind(null, 'attr');
    var filterProps = filterByType.bind(null, 'prop');
    var filterCallbacks = filterByType.bind(null, 'callback');

    function createMaps(maps) {
        return maps.map(function (map) {
            var res = '';
            if (map.values.length !== 0) {
                res += map.id + ' {';
                res += map.values.map(function (attr) {
                    return '{' + attr.name + ', ' + attr.value + '}';
                }).join(', ');
                res += '}';
            }
            return res;
        }).filter(function (map) {
            return map !== '';
        }).join(', ');
    }

    function isComment(text) {
        return text.indexOf('/*') === 0 && text.lastIndexOf('*/') === text.length - 2;
    }

    function aggregateStrings(vnodes) {
        if (vnodes.length === 1) return vnodes[0];
        return {
            type: 'string',
            aggregated: true,
            value: vnodes.map(function (vnode, index) {
                var value = vnode.value;

                if (vnode.type === 'CPXText') {
                    if (index === 0) {
                        value = value.replace(/^\s+/, '');
                    } else if (index === vnodes.length - 1) {
                        value = value.replace(/\s+$/, '');
                        var previousSpaces = /\s+$/.exec(vnodes[index - 1].value);
                        if (previousSpaces !== null) {
                            value = previousSpaces[0] + value;
                        }
                    }
                    return 'u8"' + value + '"';
                } else if (vnode.type === 'string') {
                    return 'std::string(' + value.trim() + ')';
                }
            }).join(' + ')
        };
    }

    function aggregateNodes(vnodes) {
        var computedVnodes = [];
        var strings = [];
        for (var i = 0; i < vnodes.length; i++) {
            var child = vnodes[i];
            if (child.type === 'CPXText' || child.type === 'string') {
                strings.push(child);
            } else {
                if (strings.length !== 0) {
                    computedVnodes.push(aggregateStrings(strings));
                    strings = [];
                }
                computedVnodes.push(child);
            }
        }
        if (strings.length !== 0) {
            computedVnodes.push(aggregateStrings(strings));
        }
        return computedVnodes;
    }

    function createVNode(data) {
        var vnode;
        if (data.type === 'VNode') return data.value;
        if (data.type === 'string') return 'asmdom::h(' + data.value.trim() + ', true)';
        if (data.type === 'CPXText') return 'asmdom::h(u8"' + data.value.trim() + '", true)';
        if (data.type === 'CPXComment') return 'asmdom::h(u8"!", std::string(u8"' + data.value + '"))';
        if (data.type === 'CPXElement') {
            vnode = 'asmdom::h(' + data.sel;

            if (data.data !== undefined && data.data.length !== 0) {
                vnode += ', Data (';

                vnode += createMaps([{ id: 'Attrs', values: filterAttrs(data) }, { id: 'Props', values: filterProps(data) }, { id: 'Callbacks', values: filterCallbacks(data) }]);

                vnode += ')';
            }

            if (data.children !== undefined) {
                var children = aggregateNodes(data.children.filter(function (child) {
                    return child.type !== 'comment';
                }));

                if (children.length === 1) {
                    vnode += ', ';
                    if (children[0].type === 'CPXText') {
                        vnode += 'std::string(u8"' + children[0].value.trim() + '")';
                    } else if (children[0].type === 'string') {
                        vnode += children[0].aggregated !== true ? 'std::string(' + children[0].value.trim() + ')' : children[0].value.trim();
                    } else {
                        vnode += createVNode(children[0]);
                    }
                } else if (children.length > 1) {
                    vnode += ', Children {' + children.map(createVNode).join(', ') + '}';
                }
            }

            vnode += ')';
        }
        return vnode;
    }
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return 45;
                        break;
                    case 1:
                        return 42;
                        break;
                    case 2:
                        return 41;
                        break;
                    case 3:
                        return 24;
                        break;
                    case 4:
                        return 12;
                        break;
                    case 5:
                        return 16;
                        break;
                    case 6:
                        return 15;
                        break;
                    case 7:
                        return 40;
                        break;
                    case 8:
                        return 25;
                        break;
                    case 9:
                        return 22;
                        break;
                    case 10:
                        return 23;
                        break;
                    case 11:
                        return 26;
                        break;
                    case 12:
                        return 31;
                        break;
                    case 13:
                        return 32;
                        break;
                    case 14:
                        return 33;
                        break;
                    case 15:
                        return 34;
                        break;
                    case 16:
                        return 35;
                        break;
                    case 17:
                        return 36;
                        break;
                    case 18:
                        return 21;
                        break;
                    case 19:
                        return 4;
                        break;
                    case 20:
                        return 44;
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:VNode\b)/, /^(?:string\b)/, /^(?:->)/, /^(?:<)/, /^(?:>)/, /^(?:\/)/, /^(?:\*)/, /^(?:\.)/, /^(?:-)/, /^(?::)/, /^(?:!)/, /^(?:\{)/, /^(?:\})/, /^(?:\[)/, /^(?:\])/, /^(?:\()/, /^(?:\))/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:$)/, /^(?:(.|\n))/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = language;
    exports.Parser = language.Parser;
    exports.parse = function () {
        return language.parse.apply(language, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}